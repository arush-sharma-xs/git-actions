name: GitHub Actions - Deploy Lambda function
run-name: ${{ github.actor }} is deploying the lambda function on AWS ðŸš€
# on: [push]
on:
  push:
    branches:
      - main

jobs:
  lambda_demo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Creating deployment zip
        run: |
          sudo apt install zip
          mkdir -p ./deployment_zip

          # Set up pip configuration for Lambda compatibility
          pip config set global.target ./deployment_zip
          pip config set global.platform manylinux2014_x86_64
          
          # Install all dependencies at once from requirements.txt
          pip install -r requirements.txt \
            --target ./deployment_zip \
            --platform manylinux2014_x86_64 \
            --implementation cp \
            --python-version 3.9 \
            --only-binary=:all: \
            --upgrade
          # Copy the Lambda function
          cp ./lambda_function.py ./deployment_zip/
          cd deployment_zip
          zip -r lambda_zip.zip *

          # First check if function exists
          if ! aws lambda get-function --function-name lambda_deployment_via_gitaction 2>/dev/null; then
            echo "Lambda function does not exist. Creating new function..."
            # Get the Lambda execution role ARN from environment
            LAMBDA_ROLE_ARN="${{ secrets.LAMBDA_ROLE_ARN }}"
            if [ -z "$LAMBDA_ROLE_ARN" ]; then
              echo "Error: LAMBDA_ROLE_ARN secret is not set"
              exit 1
            fi
            # Create the Lambda function
            aws lambda create-function \
              --function-name lambda_deployment_via_gitaction \
              --zip-file fileb://lambda_zip.zip \
              --runtime python3.8 \
              --handler lambda_function.lambda_handler \
              --role "$LAMBDA_ROLE_ARN"
            
            # Wait for the function to be active
            echo "Waiting for Lambda function to be active..."
            while true; do
              STATUS=$(aws lambda get-function --function-name lambda_deployment_via_gitaction --query 'Configuration.State' --output text 2>/dev/null)
              if [ "$STATUS" = "Active" ]; then
                echo "Lambda function is now active"
                break
              elif [ "$STATUS" = "Failed" ]; then
                echo "Lambda function creation failed"
                exit 1
              fi
              echo "Current status: $STATUS. Waiting..."
              sleep 5
            done
          else
            echo "Lambda function already exists. Proceeding with update..."
          fi
      - name: Check for code changes
        id: check_changes
        run: |
          # Get current deployment package hash
          CURRENT_HASH=$(cd deployment_zip && find . -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "Current package hash: $CURRENT_HASH"

          # Get deployed function hash
          DEPLOYED_HASH=$(aws lambda get-function \
            --function-name lambda_deployment_via_gitaction \
            --query 'Configuration.CodeSha256' \
            --output text || echo "none")
          echo "Deployed function hash: $DEPLOYED_HASH"

          # Store the result
          if [ "$DEPLOYED_HASH" != "none" ] && [ "$CURRENT_HASH" = "$DEPLOYED_HASH" ]; then
            echo "No code changes detected"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          else
            echo "Code changes detected"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi

      - name: Update Lambda function
        if: steps.check_changes.outputs.needs_update == 'true'
        run: |
          echo "Updating Lambda function with new code..."
          MAX_RETRIES=5
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if aws lambda update-function-code \
              --function-name lambda_deployment_via_gitaction \
              --zip-file fileb://./deployment_zip/lambda_zip.zip; then
              echo "Successfully updated Lambda function code"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "Failed to update Lambda function after $MAX_RETRIES attempts"
                exit 1
              fi
              echo "Update failed. Retrying in 5 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
              sleep 5
            fi
          done

      - name: Skip update notification
        if: steps.check_changes.outputs.needs_update != 'true'
        run: |
          echo "No code changes detected. Skipping Lambda function update."
